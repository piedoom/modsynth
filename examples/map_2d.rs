#![allow(incomplete_features)]
#![feature(generic_const_exprs)]

use modsynth::{Grid2, Synthesizer2};

fn main() {
    let sample = Grid2::new_with_data(
        [10, 16],
        vec![
            "🟩", "🟩", "❎", "❎", "❎", "🟩", "🟩", "🟩", "🟩", "🟩", //
            "🟩", "❎", "🟦", "🟦", "🟦", "❎", "🟩", "🟩", "🟩", "🟩", //
            "🟩", "❎", "🟦", "🟦", "🟦", "❎", "🏠", "🟩", "🟩", "🟩", //
            "🟩", "❎", "🟦", "🟦", "❎", "🟩", "🟨", "🟨", "🟩", "🟪", //
            "🟩", "❎", "🟦", "🟦", "❎", "🟨", "🟨", "🟩", "🟩", "🟩", //
            "🟩", "❎", "🟦", "🟦", "❎", "🟨", "🟩", "🟩", "🟩", "🟩", //
            "🟩", "❎", "🟦", "🟦", "❎", "🟩", "🟩", "🟩", "🟩", "🟩", //
            "🟩", "❎", "🟦", "🟦", "🟦", "❎", "🟩", "🟩", "🟩", "🟩", //
            "🟪", "❎", "🟫", "🟫", "🟫", "❎", "🟩", "🟩", "🟩", "🟩", //
            "🟩", "❎", "🟫", "🟫", "🟫", "❎", "🟩", "❎", "❎", "🟩", //
            "🟩", "❎", "🟦", "🟦", "🟦", "❎", "❎", "🟦", "🟦", "❎", //
            "🟩", "❎", "🟦", "🟦", "🟦", "❎", "🟦", "🟦", "🟦", "❎", //
            "🟩", "❎", "🟦", "🟦", "🟦", "🟦", "🟦", "🟦", "❎", "🟩", //
            "🟩", "❎", "🟦", "🟦", "🟦", "🟦", "🟦", "❎", "🟩", "🟩", //
            "🟩", "❎", "🟦", "🟦", "🟦", "❎", "❎", "🟩", "🟩", "🟩", //
            "🟩", "🟩", "❎", "❎", "❎", "🟩", "🟩", "🟩", "🟪", "🟩", //
        ]
        .chunks(10)
        .rev()
        .flatten()
        .cloned()
        .collect(),
    );

    let sample_2 = Grid2::new_with_data(
        [10, 16],
        vec![
            "🟪", "🟪", "🟪", "🟪", "⬜", "⬜", "🟩", "🟩", "🟩", "🟩", //
            "🟪", "🟪", "🟪", "🟪", "🟪", "⬜", "⬜", "🟩", "🟩", "🟩", //
            "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", "⬜", "⬜", "🟩", "🟩", //
            "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", "⬜", "⬜", "🟩", //
            "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", "⬜", "⬜", //
            "🟧", "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", "⬜", //
            "🟧", "🟧", "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", //
            "🟨", "🟧", "🟧", "🟪", "🟪", "🟪", "🟪", "🟪", "🟪", "⬜", //
            "🟨", "🟧", "🟧", "🟪", "🟪", "🟪", "🟪", "🟪", "⬜", "⬜", //
            "🟧", "🟧", "🟪", "🟪", "🟪", "🟪", "🟪", "⬜", "⬜", "🟩", //
            "🟧", "🟪", "🟪", "🟪", "🟪", "🟪", "⬜", "⬜", "🟩", "🟩", //
            "🟪", "🟪", "🟪", "🟪", "🟪", "⬜", "⬜", "🟩", "🟩", "🟩", //
            "🟪", "🟪", "🟪", "🟪", "⬜", "⬜", "🟩", "🟩", "🟩", "🟩", //
            "🟪", "🟪", "🟪", "⬜", "⬜", "🟩", "🟩", "🟩", "🟩", "🟩", //
            "🟪", "🟪", "🚃", "🚃", "🚃", "🚃", "🚃", "🚃", "🚃", "🟩", //
            "🟪", "⬜", "⬜", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", //
        ]
        .chunks(10)
        .rev()
        .flatten()
        .cloned()
        .collect(),
    );

    let mut synth = Synthesizer2::from_sample(sample);
    synth.add_sample(sample_2);

    println!("Generated:");

    // synth.synthesize(10, 10, 10000).unwrap().pretty_print();
    // synth.synthesize(7, 7, 10000).unwrap().pretty_print();
    // synth.synthesize(7, 7, 1000).unwrap().pretty_print();
    let grid = synth.synthesize(16, 16, 100000, 16).unwrap();
    // dbg!(info);
    println!("{}", grid.to_string_from_cell(|t| t.to_string()));
}
